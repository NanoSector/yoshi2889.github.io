[{"content":"I doubt I\u0026rsquo;ll be alone when I say that my server setup is a mess. It is a monolith of different services slammed together on the same machine. Some run on the bare metal, some run in a VM, some run in containers.\nRecently I put some work into migrating my applications away from bare metal and into containers. While that effort is not complete just yet, it has already broken on me after podman-compose stopped creating pods per compose file. Apparently that was a bug, and I relied on this behaviour with a wrapper script.\nThe sequence this script followed is rather simple:\n Remove any existing podman-generated systemd unit files from ~/.config/systemd/system Run podman-compose up Generate new system files with podman generate systemd Move all *.service files generated to the ~/.config/systemd/system directory  However, this relied on the previous behaviour in podman-compose which created a pod for all services to live in per compose file, so it can guess the pod name and generate a set of systemd units for it with one invocation of the podman generate systemd command. Nifty, worked for a while, but now it\u0026rsquo;s time to move on.\nThe puzzle pieces Let\u0026rsquo;s lay out what we want to achieve.\n For security, containers should be rootless For maintainability, containers should be defined in a docker-compose.yml file For usability, containers should auto-start on boot Purely for the sake of laziness we\u0026rsquo;ll throw in the extra requirement that containers should be self-updating  This might haunt me later. We\u0026rsquo;ll see about that, but because of this it should be trivial to disable    Target 1: Rootless I refuse to run my containers in a rootful environment. I strongly believe that podman is designed to remedy this design decision in Docker and I should take advantage of that.\nMy containers run as a separate podman user with virtually no privileges on the system. Most containers run the software they host under a different user as well, which means that it\u0026rsquo;s practically impossible for container X to touch container Y\u0026rsquo;s files.\nThis imposes challenges when you want to share folders between containers, but that\u0026rsquo;s something a little GID magic can solve; give the containers the same GID and set a restrictive permission mask on that, so the actual owner gets write permissions yet other containers get read permission only.\nTarget 2: docker-compose The standard docker-compose now works with podman v3!\nA standard docker-compose.yml file should be sufficient. As an example, below is the configuration file for my Nextcloud instance:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  version:\u0026#39;3\u0026#39;services:db:image:postgres:alpinerestart:alwaysvolumes:- /containers/nextcloud/db:/var/lib/postgresql/dataenvironment:- POSTGRES_PASSWORD=VERY_SECURE_POSTGRESQL_PASSWORD_HEREredis:image:redis:alpinerestart:alwaysapp:image:nextcloud:apacherestart:alwaysports:- 81:80volumes:- /containers/nextcloud/html:/var/www/html- /mnt/storage/Nextcloud:/var/www/html/dataenvironment:- POSTGRES_HOST=db- POSTGRES_PASSWORD=VERY_SECURE_NEXTCLOUD_POSTGRESQL_PASSWORD_HERE- POSTGRES_DB=nextcloud- POSTGRES_USER=ncuser- REDIS_HOST=redisenv_file:- db.envdepends_on:- db- rediscron:image:nextcloud:apacherestart:alwaysvolumes:- /containers/nextcloud/html:/var/www/html- /mnt/storage/Nextcloud:/var/www/html/dataentrypoint:/cron.shdepends_on:- db- redisonlyoffice:image:\u0026#39;onlyoffice/documentserver\u0026#39;ports:- \u0026#39;9980:80\u0026#39;environment:DB_TYPE:postgresDB_HOST:dbDB_PORT:5432DB_NAME:onlyofficeDB_USER:onlyofficeDB_PWD:VERY_SECURE_ONLYOFFICE_POSTGRESQL_PASSWORD_HEREJWT_ENABLED:\u0026#39;true\u0026#39;JWT_SECRET:VERY_SECURE_JWT_SECRET_HEREvolumes:- /containers/onlyoffice/logs:/var/log/onlyoffice- /containers/onlyoffice/certificates:/var/www/onlyoffice/Datadepends_on:- dbrestart:always  The only thing really of note is that every service has restart: always set. This will be explained later.\n Please note that rootless containers might not have the same privileges as a rootful container in terms of networking etcetera. Always double check the compose files you copy!\n  It is preferred that you use the podman secrets infrastructure for passwords instead of hardcoding them into this text file. This is beyond the scope of this article, do some research!\n Target 2.1: SELinux Fedora has SELinux enabled by default, and we don\u0026rsquo;t want to make Dan Walsh weep. Thankfully, setting up SELinux to play nice with your containers is trivial.\nWhat I like to do is create a /containers directory (yes, in the root folder) whose owner I set to the podman user. After this it is just a matter of making sure the directory has the right SELinux type label, which is container_file_t. You can achieve this with the following command:\n1  semanage fcontext -a -t container_file_t \u0026#39;/containers(/.*)?\u0026#39;   This will ensure that the /containers directory and all of its sub-directories and files will get the appropriate SELinux type applied. This however does not immediately apply to existing files or directories, so we can apply it by running:\n1  restorecon -Rv /containers   If all is well you should be seeing a lot of label changes being printed to the console, depending on how many files exist in this directory.\nTarget 3: Autostart on boot This took me too long to figure out, but it turns out that Podman already ships with a solution built in. Remember the restart: always that I mentioned earlier?\nIt turns out Podman ships with a systemd unit file specifically to start all containers marked to always restart. It is called podman-restart.service and it can be enabled as a user service!\n1  systemctl enable --user podman-restart.service   Start a container marked with restart: always, and then reboot your system. Nothing happens, congratulations!\nBy default, user units are only started whenever the user starts a session. Since nobody has logged in to your podman user, no session was ever started. Even worse, should someone login as the podman user, the session will start, which will start your container - and then it will get killed when that person logs out. That\u0026rsquo;s super inconvenient.\nsystemd-logind has a concept of lingering users. The loginctl man page describes it as:\n \u0026hellip; If enabled for a specific user, a user manager is spawned for the user at boot and kept around after logouts. This allows users who are not logged in to run long-running services. \u0026hellip;\n We can enable this for our podman user with the following command:\n1  loginctl enable-linger PODMAN-USER-HERE   Set that, reboot again and you should see it all start to come together.\nTarget 4: Automatic updates The tricky part. We can have dnf automatic updates through dnf-automatic, and Podman even has its own auto-update system! However, we cannot use this in this setup, because we do not rely on per-container systemd unit files, because we use podman-compose and the global podman-restart.service.\nInstead, what we can do is replicate the setup using custom unit files per docker-compose file. Create the following file at ~/.config/systemd/user/podman-update@.service:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  [Unit] Description=Podman auto-update service for %i Wants=network-online.target After=network-online.target [Service] WorkingDirectory=%h/infra/%i Environment=\u0026#34;DOCKER_HOST=unix:%t/podman/podman.sock\u0026#34; Type=oneshot ExecStart=/usr/bin/docker-compose pull ExecStartPost=/usr/bin/docker-compose up -d ExecStartPost=/usr/bin/podman image prune -f # Uncomment the following if you want to have e-mail notifications #ExecStopPost=/usr/bin/unit-status-mail-user.sh %n \u0026#34;Hostname: %H\u0026#34; \u0026#34;Machine ID: %m\u0026#34; \u0026#34;Boot ID: %b\u0026#34; [Install] WantedBy=default.target   This is a template file which can be used multiple times with a different input parameter (the string after the @ sign).\n Make sure to check the WorkingDirectory setting! This assumes you have your docker-compose.yml files stored in ~/infra/[subfolder]/docker-compose.yml\n And add the following timer at ~/.config/systemd/user/podman-update@.timer:\n1 2 3 4 5 6 7 8 9 10  [Unit] Description=Podman update timer for %i [Timer] OnCalendar=daily RandomizedDelaySec=900 Persistent=true [Install] WantedBy=timers.target   For every subfolder, you can now enable the timer, which will call the unit:\n1  systemctl --user enable podman-update@nextcloud.timer   Where nextcloud is a subfolder of ~/infra. Your nextcloud container will now update daily at midnight!\nBonus: Mail on unit start/failure northernlights.se has a great resource on automatically mailing unit status after a unit starts or stops.\nTo adjust this approach for user unit files, create /usr/bin/unit-status-mail-user.sh with:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #!/bin/bash MAILTO=\u0026#34;root\u0026#34; MAILFROM=\u0026#34;unit-status-mailer\u0026#34; UNIT=$1 EXTRA=\u0026#34;\u0026#34; for e in \u0026#34;${@:2}\u0026#34;; do EXTRA+=\u0026#34;$e\u0026#34;$\u0026#39;\\n\u0026#39; done UNITSTATUS=$(systemctl status --user $UNIT) sendmail $MAILTO \u0026lt;\u0026lt;EOF From:$MAILFROM To:$MAILTO Subject:Status mail for unit: $UNIT Status report for unit: $UNIT $EXTRA $UNITSTATUS EOF echo -e \u0026#34;Status mail sent to: $MAILTOfor unit: $UNIT\u0026#34;   Then uncomment the commented line in the systemd service above. Don\u0026rsquo;t forget to chmod +x the file and add SELinux rules:\n1 2 3  chmod +x /usr/bin/unit-status-mail.sh /usr/bin/unit-status-mail-user.sh restorecon -vF /usr/bin/unit-status-mail.sh restorecon -vF /usr/bin/unit-status-mail-user.sh   ","permalink":"https://www.nanosector.nl/posts/podman-rootless-autostart/","summary":"I doubt I\u0026rsquo;ll be alone when I say that my server setup is a mess. It is a monolith of different services slammed together on the same machine. Some run on the bare metal, some run in a VM, some run in containers.\nRecently I put some work into migrating my applications away from bare metal and into containers. While that effort is not complete just yet, it has already broken on me after podman-compose stopped creating pods per compose file.","title":"Autostarting, auto-updating, rootless Podman containers"},{"content":"Installing Windows 10 on older Macs is still possible but may be tricky because Apple doesn\u0026rsquo;t officially support this. Boot Camp Assistant has an internal list of Windows 7-only Macs in its Info.plist. With some hackery and foolery you therefore are able to trick it into installing Windows 10 on an otherwise unsupported Mac. Partially.\nI prefer to take the manual route and taking full control over this process. There are a number of hurdles to overcome.\nPreface: The lazy route A little trick I often use to skip some steps actually requires a Windows 7 DVD. Doesn\u0026rsquo;t matter which one, it just has to be recognised by Boot Camp Assistant.\nThe reason for this is that Boot Camp Assistant will not proceed to partition your disk without a valid Windows 7 DVD inserted. Insert one, fire up the Assistant, and proceed all the way through partitioning the disk as if you would install Windows 7.\nMake sure to stop when it asks for an administrator password to install a \u0026ldquo;helper tool\u0026rdquo;. Cancel this prompt and close the Boot Camp Assistant. At this point, your disk is properly partitioned, and you can skip to step 4 in this guide.\nSidenote: While you can tick the box to download Windows 7 drivers, do not just install them as they come. This will be covered later in the guide.\nPrerequisites  Your target Mac A computer running Windows A USB stick with a Linux distro of your choice A way to download or transfer the Boot Camp support software packages  If you do not already have a Windows 10 DVD:\n NLite (the free edition is good enough) A Windows 10 ISO A blank DVD  Hurdle 1: Fitting Windows 10 onto a DVD Oh boy, Microsoft, what have you done. Windows needs to go on a diet, and fast. Being obese like this is unhealthy.\nJokes aside, DVDs are 4.7 GB and Windows is well over 5 GB at this point. We can luckily trim it down.\nLet\u0026rsquo;s start by discussing the reason we need Windows onto a DVD. This is because Macs are designed to boot USB devices natively in EFI mode, however any DVD can boot in what is called CSM mode; Compatibility Support Module. This essentially acts as a legacy BIOS emulation layer. The Mac bootloader marks this partition as \u0026ldquo;Windows\u0026rdquo;, and its font is slightly off from other entries.\nThe reason we need Windows in CSM and therefore on a DVD is because some of Apple\u0026rsquo;s drivers do not work correctly in EFI mode, most notably the NVIDIA and AMD/ATI GPU drivers which cause various issues. Booting from USB won\u0026rsquo;t get us into CSM.\nRight, trimming the fat. YMMV, but using NLite to trim down the ISO by removing excessive editions got my ISO below 4 GB. The steps are fairly simple:\n Mount the Windows 10 ISO by double clicking it, Create a folder (for example on your desktop) and copy the files from the ISO in it, Open NLite and add the folder as a loaded image, From NLite\u0026rsquo;s home screen, unfold the now loaded image so that you can see the editions, For every unwanted edition, right-click it and choose Delete. I kept only Home and Pro, Right-click the top level folder for this image tree and select Create ISO, You\u0026rsquo;re done! Save this ISO somewhere.  Burn the resulting ISO to a DVD if it fits. If not, cut some more features and editions.\nHurdle 2: Partitioning Note: All these steps assume you\u0026rsquo;re starting from a clean slate with only 1 macOS installation and no other OSes on the same drive. If this is not your case, YMMV.\nTLDR: Create an exFAT (or NTFS) partition.\nOn your Mac, open Disk Utility. Make sure to select Show all devices from the View menu. This stupid default design warrants a whole different rant, but luckily that\u0026rsquo;s the fix.\nNow:\n Select your boot drive, Select Partition, Click the Plus icon and adjust the partition size for what you want Windows to take up, Set Format as exFAT, Give it an easy to recognise name. Boot Camp Assistant would\u0026rsquo;ve named it BOOTCAMP so that\u0026rsquo;s what I\u0026rsquo;m rolling with, Select Apply, Sit back and hope Disk Utility does its job.  This might take a while depending on how fragmented your disk is (it might have to move chunks of data around).\nThe Format does not truly matter, but it makes our life easier later on. If you\u0026rsquo;re following along on Linux, just create an NTFS partition like you normally would.\nThat\u0026rsquo;s the end of easy mode.\nHurdle 3: Hybrid MBR/GPT The fun begins here. You\u0026rsquo;d really wish you had Boot Camp Assistant at this point.\nThere is an excellent guide on this: https://www.rodsbooks.com/gdisk/hybrid.html\nDo read it, but it boils down to the following steps. Make sure to get them right to not accidentally cause damage to your other partitions.\n Boot your Linux USB stick  If this fails with a black screen, add nomodeset to your kernel parameter list   Open your disk in gdisk, for example: gdisk /dev/sda Open the recovery/transformation menu: r Enter the p command and check what number your freshly created exFAT/NTFS partition has Create a hybrid MBR by entering h  Enter the number of your new partition when it asks for one Answer Yes (y) when it asks about putting an EFI GPT partition first Accept the default MBR hex code by pressing enter Answer Yes (y) when it asks to set a bootable flag Answer No (n) when it asks about unused partition space  Make SURE not to accidentally answer Yes here as macOS gets confused without free space in between partitions!     Confirm your changes by viewing them with the o command If all looks good, write the changes with w  Reboot your Mac once this is done. If you head into the boot menu, you should see that an option for the weird-font Windows has popped up. This won\u0026rsquo;t work for now.\nHurdle 4: Install Windows Pop in your Windows DVD. Wait for the installer to boot, this might take a long while.\nFollow its instructions and select the partition created in step 1 as your installation target.\nFormat this partition using the options at the bottom of the window. Then click Next to continue the installation.\nEverything plays out as normal here. The only inconvenience is that your Mac will default to booting macOS since Boot Camp Assistant would also set the startup disk correctly. You can fix this in System Preferences -\u0026gt; Startup disk.\nHurdle 5: Installing drivers \u0026amp; Boot Camp Control Panel Thought creating a hybrid GPT was bad?\nYour Boot Camp installer downloaded from Boot Camp Assistant will not work on Windows 10. Apple has conveniently locked this to the designated OS version, usually Windows 7. You can\u0026rsquo;t run MSIs in compatibility mode, only msiexec if you truly desire.\nBut this does not matter. The drivers aren\u0026rsquo;t packaged in this installer, and you can install these separately, no problem. Hold your horses before clicking on every item like a madman though, Windows 10 has support for a lot of hardware out of the box.\nWhat I like to do is let Windows figure out the majority of drivers. It\u0026rsquo;ll usually find more up-to-date drivers for major things like your GPU, wireless, etc.\n5.1: What drivers are you talking about? If you did not obtain drivers from Boot Camp Assistant, you can still obtain them using a tool called brigadier. At the time of writing this tool has not been updated in years but it still works perfectly fine.\nMake sure to install 7-zip. Brigadier requires it to unpack the Boot Camp .dmg files.\n  Download the latest .exe from the Releases page\n  Open a PowerShell window in the directory where you put it\n  Enter the following: .\\brigadier.exe\n If you\u0026rsquo;re running on a Mac, it\u0026rsquo;ll automatically find your Mac model and download the latest Boot Camp support software. If not, append your model like so: .\\brigadier.exe -m iMac11,1    Take note of its output: Making directory [...]/BootCamp-041-89042\n  Also download the Boot Camp support package for a Mac which natively supports Windows 10.\n I like to use my own MacBook Pro for this, so my command becomes .\\brigadier.exe -m MacBookPro14,2    Open Device Manager and look for unknown devices\n  Install drivers for any unknown devices from the directory Brigadier mentioned from the first command\n  DO NOT SKIP THIS STEP: Copy the Drivers/Apple/BootCamp.msi file from the package for the newer Mac to a different folder, like your desktop.\n The point of this is to prevent it from launching the installers for other drivers. This might therefore throw an error for \u0026lsquo;an installation package\u0026rsquo; which cannot be opened. Ignore this, the installer should proceed.    Run the BootCamp.msi installer from its new home\n  Run the AppleSoftwareUpdate.msi installer for the Apple Software Update utility\n Considering your Mac wasn\u0026rsquo;t officially supported to begin with, this might not be all that useful.    5.2: Problems I\u0026rsquo;ve experienced   I have no audio!\n Install Apple\u0026rsquo;s audio drivers, usually under the Cirrus directory    What bluetooth package do I need?\n In my experience, usually AppleBroadcomBluetooth. If in doubt, try them until one works.    Where\u0026rsquo;s brightness?\n Apple doesn\u0026rsquo;t implement hotkeys in Windows, you\u0026rsquo;ll have to use the Boot Camp control panel for this.    My trackpad doesn\u0026rsquo;t work\n Replace Apple\u0026rsquo;s drivers with the excellent open source Mac precision drivers These drivers may feel wiggly. Not sure how to fix that, but defuzz is on the to-do list. Other than that they feel superior to the Apple drivers.    Hurdle 6: Conclusion By now you should have a (mostly) functional Windows installation on your system. As hardware gets older, support for it deteriorates, even in Windows.\nI hope this article was useful in providing a relatively complete guide to install Windows on your old Mac. If you like throwing unsupported software at your Mac, check out dosdude1\u0026rsquo;s patchers.\nLinux might be another option, however support for many Macs is flaky at best.\nIf you have any suggestions or questions, feel free to open an issue or pull request on the repository for this site.\nThanks for reading all the way through!\n","permalink":"https://www.nanosector.nl/posts/skip-boot-camp-old-mac/","summary":"Installing Windows 10 on older Macs is still possible but may be tricky because Apple doesn\u0026rsquo;t officially support this. Boot Camp Assistant has an internal list of Windows 7-only Macs in its Info.plist. With some hackery and foolery you therefore are able to trick it into installing Windows 10 on an otherwise unsupported Mac. Partially.\nI prefer to take the manual route and taking full control over this process. There are a number of hurdles to overcome.","title":"Windows 10 on old Macs without Boot Camp"},{"content":"Recently I purchased a supposedly faulty A1342 MacBook6,1 (\u0026lsquo;09 13\u0026quot; white MacBook). The listing mentioned it \u0026ldquo;would no longer turn on\u0026rdquo; and the seller tried various things to get it back to life, to no avail. Let\u0026rsquo;s diagnose and fix it!\nDiagnosis: First boot Unboxing the laptop from its original box (what a find!), it indeed did not turn on. The SIL (Sleep Indicator Light) would flash a few times, which according to Apple\u0026rsquo;s website meant the battery was faulty. However, a faulty battery should normally not cause the machine to not turn on at all when plugged in to a power source.\nVery often, when computer don\u0026rsquo;t pass POST (Power-On Self Test) and there is no sign of life beyond a flashing light, the RAM has gone bad. Such was the case in this laptop and removing one of the sticks caused it to turn on!\nBut this was only just the beginning.\nDiagnosis: Boot failures While the machine looked like it was booting, it would not boot all the way to macOS and shut down about halfway through.\nLooking around for potential reasons for boot failures I stumbled upon this video by Louis Rossman talking about a malfunctioning touchpad disabling the screen.\nOne-by-one I started unplugging various components inside the machine, starting with the touchpad, while booting it back up after every change. I noticed the first change happened after unplugging the touchpad, verified by mixing the various components:\n The fan would now spin at full speed. And it was loud. The machine no longer booted past a white screen without Apple logo. No matter the key combinations.  However, after also unplugging the wireless module, the machine would boot up fine, and even fully boot to macOS.\nThe following table summarises the various combinations:\n   Combination Mac OS X 10.6 (DVD) Fedora 32 (USB) Windows 7 (DVD)     Everything x ✓ x   No touchpad x x x   No touchpad or wifi ✓ ✓ ✓    Diagnosis: The birth of SlackBook It was slow. Not to mention noisy. The installation of macOS took literal hours onto an SSD. Booting the fresh installation took minutes.\nIn fact, it was so slow, that this machine was dubbed SlackBook, because it really was slacking. At first, I blamed the DVD drive, however after installation it became apparent that the SSD was not much faster. Mac OS X 10.6 should not take minutes to boot, especially not from an SSD and on a fresh installation.\nLet\u0026rsquo;s open Activity Monitor.\nkernel_task is a core process of Mac OS X that manages a lot of low-level tasks on behalf of the operating system\u0026rsquo;s kernel. According to Apple high kernel_task CPU usage might be caused due to high temperatures. It simply prevents other processes from using this CPU power.\nOn top of that, the CPU does run anywhere beyond 800 MHz. Combine this with practically cutting your CPU power in half, and the slowness starts to make sense.\nWhy would this happen though? The system did not feel hot or even warm. The fan was spinning at full speed, so the metal cover even felt cold to the touch.\nUsing Macs Fan Control we can get a look at the thermal sensors inside SlackBook. These screenshots are taken after the machine has been fixed.\nNotice anything missing? There is no Palm Rest sensor. The logical conclusion would be that the touchpad provides this sensor, which would make sense considering its location. The kernel likely assumes the machine is overheating whenever one or more sensors are missing.\nDiagnosis: Unhappy Kernel On top of the touchpad issues, the keyboard was intermittently working. The kernel is really unhappy about a missing touchpad and seems to be resetting the driver responsible for it every second.\nLouis makes a point in the aformentioned video that the keyboard traffic is routed through the touchpad. Seeing as the touchpad and keyboard are listed as Apple Internal Keyboard / Trackpad in System Information, but the keyboard is intermittently working, I think this is not the case for this machine, but rather the keyboard is affected by the driver resets as they share the same USB device. This is purely hypothetical though.\nThe fix The fix is simple. Replace the touchpad.\nThese touchpads are set up in a way that the surface and the actual circuitry behind it can be separated. Therefore, the surface could potentially be reused if the circuitry in the cable went bad. In a guide by iFixit you can see how this works. Booting the machine with just the cable but no surface attached works fine.\nReplacing the touchpad in this machine made the Palm Rest sensor show up again and the machine booted fine and was no longer throttling.\nFor this machine the fix was a bit more nuanced though. Besides the touchpad issues, the machine also had blown speakers and showed no audio output in any operating system. The logic board has some damage and a missing component around the audio circuitry, likely caused by the bottom case scraping against the board while reassembling the system. One of the metal retention clips on the bottom case is located nearby this section and could have caused this damage by not properly lining up the bottom case. This likely caused a short or peak in voltage which in turn damaged the speakers.\nMoreover, the top case was shattered around the MagSafe port. The only solution here is to buy a new top case. The first one I received had an outright broken keyboard, but the seller was extremely generous and shipped a replacement the day after, which worked perfectly fine and even included a touchpad.\nIn the end, I replaced the following components:\n Top case with a keyboard and upward-facing speakers, Touchpad, Logic board, Battery, Rear main speaker.  Needless to say, I paid more in parts than this machine would sell for. However, it was a really fun and interesting experience.\nThe verdict Is this caused by bad design? I don\u0026rsquo;t think it is. This is the result of the machine detecting a fault and trying to protect itself from further damage. The machine definitely did not necessarily have to throttle the way it did, nor did the CPU protections in kernel_task have to kick in while not having a touchpad.\nThe only point of concern here is the coupling of touchpad and keyboard into a single USB device. While untested, killing the keyboard likely results in issues with the touchpad.\nAll in all, your machine has a fault that needs to be fixed for proper operation. Having protections in place is a good thing, however ridiculous these might seem at a first glance.\n","permalink":"https://www.nanosector.nl/posts/a-touching-scenario/","summary":"Recently I purchased a supposedly faulty A1342 MacBook6,1 (\u0026lsquo;09 13\u0026quot; white MacBook). The listing mentioned it \u0026ldquo;would no longer turn on\u0026rdquo; and the seller tried various things to get it back to life, to no avail. Let\u0026rsquo;s diagnose and fix it!\nDiagnosis: First boot Unboxing the laptop from its original box (what a find!), it indeed did not turn on. The SIL (Sleep Indicator Light) would flash a few times, which according to Apple\u0026rsquo;s website meant the battery was faulty.","title":"A Touching Scenario"},{"content":"Someone who has checked out this site before might have noticed it, for the longest time, had a dreadful \u0026ldquo;403 Forbidden\u0026rdquo; error. Oops.\nThe reason for this is pretty simple: I never bothered to set up a site and configure Nginx with it. It tried to access static content, failed because there was no index.html, tried a directory listing, also failed there because it is not configured to allow this and well, there we are. Until today.\nWelcome! Welcome to the new site! Powered by Hugo with the awesome PaperMod theme, I believe this is a good resemblance of what I always felt a personal site should look and feel like; minimalist, slick and focused on content.\nMoreover, because Hugo does not require a full-fledged stack to be running, but merely a server which can serve static content. Therefore, it is hosted entirely on GitHub Pages through this repository and its roots available through this repository. Huge shoutout to GitHub for making this possible!\nWhat\u0026rsquo;s this about, then? First of all, I\u0026rsquo;m not a blogger. The content of this blog will be based purely on my own thoughts, ideas and projects. They might be accurate; they might not be. For me it is a place to capture interesting bits and pieces.\nI\u0026rsquo;ll try to keep articles short and to the point. Just like the design; less is more. Speaking of which, this was really just meant as a quick \u0026lsquo;hello\u0026rsquo;-style article, and it\u0026rsquo;s beginning to grow beyond that.\nI hope this content will be of use to somebody!\n","permalink":"https://www.nanosector.nl/posts/hello/","summary":"Someone who has checked out this site before might have noticed it, for the longest time, had a dreadful \u0026ldquo;403 Forbidden\u0026rdquo; error. Oops.\nThe reason for this is pretty simple: I never bothered to set up a site and configure Nginx with it. It tried to access static content, failed because there was no index.html, tried a directory listing, also failed there because it is not configured to allow this and well, there we are.","title":"Unforbidden Grounds"}]